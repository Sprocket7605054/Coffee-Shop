class Node: 
    def __init__(self, data):
        self.data = data
        self.next = None

class Linked:
    def __init__(self):
        self.head = None 
    
    def Index(self,index):
        current_node = self.head
        position = 0
        while current_node is not None and position != index:
            position += 1
            current_node = current_node.next
        return current_node

    def insertAtBegin(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            return
        else:
            new_node.next = self.head
            self.head = new_node

    def insertAtIndex(self, data, index):
            new_node = Node(data)
            current_node = self.head
            position = 0
            if position == index:
                self.insertAtBegin(data)
            else:
                while(current_node != None and position+1 != index):
                    position = position+1
                    current_node = current_node.next
    
                if current_node != None:
                    new_node.next = current_node.next
                    current_node.next = new_node
                else:
                    print("Index not present")

    def insertAtEnd(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            return
    
        current_node = self.head
        while(current_node.next):
            current_node = current_node.next
    
        current_node.next = new_node

    def updateNode(self, val, index):
        current_node = self.head
        position = 0
        if position == index:
            current_node.data = val
        else:
            while(current_node != None and position != index):
                position = position+1
                current_node = current_node.next
    
            if current_node != None:
                current_node.data = val
            else:
                print("Index not present")

    def remove_first_node(self):
        if(self.head == None):
            return
        
        self.head = self.head.next
    
    def print_heights(self):
        current = self.head
        while current:
            Rings = current.data
            Rings()
            current = current.next

    def clear(self):
        try:
            self.head.next
        except:
            self.head = None
        

def ring_blue():
    print("\033[1;34;40m           /¯¯¯¯¯¯\ ","\033[0;0;0m")
    print("\033[1;34;40m          /________\ ","\033[0;0;0m")

def ring_red():
    print("\033[1;31;40m         /¯¯¯¯¯¯¯¯¯¯\ ","\033[0;0;0m")
    print("\033[1;31;40m        /____________\ ","\033[0;0;0m")

def ring_green():
    print("\033[1;32;40m       /¯¯¯¯¯¯¯¯¯¯¯¯¯¯\ ","\033[0;0;0m")
    print("\033[1;32;40m      /________________\ ","\033[0;0;0m")
    
def ring_purple():
    print("\033[1;35;40m     /¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\ ","\033[0;0;0m")
    print("\033[1;35;40m    /____________________\ ","\033[0;0;0m")

def ring_yellow():
    print("\033[1;33;40m   /¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\ ","\033[0;0;0m")
    print("\033[1;33;40m  /________________________\ ", "\033[0;0;0m")

def base():
    print("\033[1;30;40m ||||||||||||||||||||||||||||")

def pillar():
    print("\033[1:30:40m             ||||")

def test():
    stack = [pillar,ring_blue,ring_red,ring_green,ring_purple,ring_yellow,base]
    Stacked = Linked()
    for y in range(len(stack)):
                Stacked.insertAtEnd(stack[y])


    Stacked.remove_first_node()
    Stacked.print_heights()

def coffe():
    Coffeeline = Linked()
    Coffeeorder = Linked()
    Opt= input("Welcome to the coffee shop. Do you want to place an order(y/n)\n")
    if Opt.lower() in ["y","yes"] or (Opt == "1"):
        print("hello")
    if Opt.lower() in ["n","no"] or (Opt == "0"):
        print("bello")

coffe()
